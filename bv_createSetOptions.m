function filecreated = bv_createSetOptions(path2root)

fid = fopen([path2root filesep 'setOptions.m'], 'w');

fprintf(fid, '%% Empty options m-file for the analysis pipe line of baby connectivity \n');
fprintf(fid, '%% data. This file should be added to your ROOT folder to keep track of all the \n');
fprintf(fid, '%% settings set when the analysis was last ran.\n');
fprintf(fid, '\n\n %%%% General options\n');
fprintf(fid, '%% general options for the whole experiment\n');
fprintf(fid, 'OPTIONS.saveData                = ''yes''; %% ''string'': (''yes'' or ''no'') to determine whether data is saved \n');
fprintf(fid, 'OPTIONS.triallength             = 5; %% [ number ]: triallength used for analysis \n');
fprintf(fid, 'OPTIONS.pathsScript             = ''setPaths''; %% ''string'': pathScript name (''setPaths'') \n');
fprintf(fid, 'OPTIONS.sDirString              = ''B''; %% ''string'': unique search string for raw eeg files which will find all files when used as dir ( [''*'' sDirString ''*''] ) \n');
fprintf(fid, 'OPTIONS.dataType                = ''bdf''; %% ''string'': (''bdf'' or ''eeg'') to determine which datatype will be used for the analyses \n');
fprintf(fid, 'OPTIONS.trigger.value           = []; %% [ double ]: trigger value(s) \n');
fprintf(fid, 'OPTIONS.trigger.label           = {}; %% { cell }: trigger label(s) (e.g. ''Social'' vs ''NonSocial''). Must be equal in length with trigger value. \n');
fprintf(fid, '\n%%%% Preprocessing options\n');
fprintf(fid, '%% options only used for the preprocessing of the data \n');
fprintf(fid, 'OPTIONS.PREPROC.resampleFs      = 512; %% [ number ]: resampling frequency. \n');
fprintf(fid, 'OPTIONS.PREPROC.trialfun        = []; %% ''string'': filename of trialfun to be used (please add trialfun to your path) \n');
fprintf(fid, 'OPTIONS.PREPROC.hpfreq          = 0.16; %% [ number ]: high-pass filter frequency cut-off \n');
fprintf(fid, 'OPTIONS.PREPROC.lpfreq          = 70; %% [ number ]: low-pass filter frequency cut-off \n');
fprintf(fid, 'OPTIONS.PREPROC.notchfreq       = 50; %% [ number ]: notch filter frequency \n');
fprintf(fid, 'OPTIONS.PREPROC.pathsFcn        = OPTIONS.pathsScript; \n');
fprintf(fid, 'OPTIONS.PREPROC.filttype        = []; %% ''string'': (''but'' or ''firws''). If none given, ''but'' is used. \n');
fprintf(fid, 'OPTIONS.PREPROC.saveData        = OPTIONS.saveData; \n');
fprintf(fid, 'OPTIONS.PREPROC.outputStr       = ''PREPROC''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.PREPROC.rmChannels      = {}; %% { cell }: names of channels to be removed before preprocessing \n');
fprintf(fid, 'OPTIONS.PREPROC.overwrite       = 1; %% [ number ]: set to 1 to overwrite existing data \n');
fprintf(fid, 'OPTIONS.PREPROC.reref           = ''yes''; %% ''string'': ''yes'' to rereference data (default: ''no'') \n');
fprintf(fid, 'OPTIONS.PREPROC.refelec         = ''all''; %% rereference electrode (string / number / cell of strings) \n');
fprintf(fid, '\n%%%% Independent component analysis options \n');
fprintf(fid, '%% set options for component analysis. Recommended is the extended ''runica'' \n');
fprintf(fid, '%% method \n');
fprintf(fid, 'OPTIONS.COMP.saveData           = OPTIONS.saveData; \n');
fprintf(fid, 'OPTIONS.COMP.outputStr          = ''COMP''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.COMP.inputStr           = ''PREPROC''; %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, 'OPTIONS.COMP.method             = ''runica''; %% ''string'': (e.g. ''runica'', ''fastica'', check FT_COMPONENTANALYSIS for more options) \n');
fprintf(fid, 'OPTIONS.COMP.extended           = 0; %% [ boolean ]: (1 or 0) to set whether ''runica'' needs to be extended (recommended) \n');
fprintf(fid, 'OPTIONS.COMP.optionsFcn         = OPTIONS.pathsScript; \n');
fprintf(fid,'\n%%%% Remove components options \n');
fprintf(fid,'%% set options for the removal of components. Blink removal can be \n');
fprintf(fid,'%% automatic. Works in 80-90 percent of the cases. Only if blinks are \n');
fprintf(fid,'%% limited (like in young infants), the automatic script seems to fail. \n');
fprintf(fid,'%% Steps are built-in to check removed component before removal. Please do \n');
fprintf(fid,'%% not skip this step and ensure the correct components have been removed \n');
fprintf(fid,'OPTIONS.COMPREMOVED.saveData            = OPTIONS.saveData; \n');
fprintf(fid,'OPTIONS.COMPREMOVED.outputStr           = ''COMPREMOVED''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid,'OPTIONS.COMPREMOVED.compStr             = ''COMP''; %% ''string'': outputstr of component analysis step, to be used to remove components \n');
fprintf(fid,'OPTIONS.COMPREMOVED.dataStr             = ''PREPROC''; %% ''string'': outputstr of data analysis step from which components need to be removed \n');
fprintf(fid,'OPTIONS.COMPREMOVED.optionsFcn          = OPTIONS.pathsScript; \n');
fprintf(fid,'OPTIONS.COMPREMOVED.automaticRemoval    = ''yes''; %% ''string'': (''yes'' or ''no''), to set whether automatic blink component removal is warranted \n');
fprintf(fid,'OPTIONS.COMPREMOVED.blinkremoval        = ''no''; %% ''string'': (''yes'' or ''no''), to automatically remove blink components (only set when automaticRemoval is set to ''yes''). (default: ''no'') \n');
fprintf(fid,'OPTIONS.COMPREMOVED.gammaremoval        = ''yes''; %% ''string'': (''yes'' or ''no''), to automatically remove gamma components (only set when automaticRemoval is set to ''yes''). (default: ''no'') \n');
fprintf(fid,'OPTIONS.COMPREMOVED.saveFigures         = ''yes''; %% ''string'': (''yes'' or ''no''), to save component removal figure \n');
fprintf(fid,'OPTIONS.COMPREMOVED.showFigures         = ''yes''; %% ''string'': (''yes'' or ''no''), to save component removal figure \n');
fprintf(fid, '\n%%%% Remove channels options \n');
fprintf(fid, '%% set options for the removal of complete channels. It is recommended to \n');
fprintf(fid, '%% only remove channels that are flatlining of are extremely noisy, so much \n');
fprintf(fid, '%% so that they will influence the average rereference grossly. \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.betaLim      = Inf; %% [ number ]: Checks for trials very high in beta. Limit of the amount of beta-power accepted in a trial (in dB.). \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.gammaLim     = Inf; %% [ number ]: Checks for trials very high in gamma. Limit of the amount of gamma-power accepted in a trial (in dB.). \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.varLim       = Inf; %% [ number ]: Checks for highly varying trials. Limit of the amount of variance accepted in a trial \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.flatLim      = 0.02; %% [ number ]: Checks for flatlining. Limit of the amount of inverse variance accepted in a trial \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.kurtLim      = 20; %% [ number ]: Checks for jumps. Limit of the kurtosis per trial \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.vMaxLim      = 500; %% [ number ]: Checks for high amplitudes. Limit the max amplitude of a trial \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.redefineTrial= ''yes''; %% ''string'': (''yes'' or ''no''). Set to redefine data to given triallength. Do not set to yes if data is already cut in trials \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.triallength  = 1; %% [ number ]: Triallength used for artifact removal (usually set to 1s). The definitive triallength is set later in the analysis \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.cutOutputData= ''no''; %% ''string'': (''yes'' or ''no'') set to ''yes'' if artefacts need to be recalculated after channel removal. Set to ''no'' when doing the rmchannels, but ''yes'' during trialremoval. **Terrible explanation, terrible variable name, just set it to ''no'' if you want to remove channels. Will be changed** \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.showFigures  = ''yes''; %% ''string'': (''yes'' or ''no''). \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.saveFigures  = ''yes''; %% ''string'': (''yes'' or ''no''). Can only save figures if figures are showed \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.inputStr     = ''COMPREMOVED''; %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.outputStr    = ''RMCHANNELS''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.saveData     = OPTIONS.saveData; \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.rmTrials     = ''no''; %% ''string'' (''yes'' or ''no''), set to ''no'' if no trials need to be removed \n');
fprintf(fid, 'OPTIONS.RMCHANNELS.optionsFcn   = OPTIONS.pathsScript; \n');
fprintf(fid, '\n%%%% Rereferencing options \n');
fprintf(fid, '%%OPTIONS.REREF.refElectrode      = %% ''string'': rereference electrode (''all'' is average rereference) \n');
fprintf(fid, '%%OPTIONS.REREF.saveData          = OPTIONS.saveData; \n');
fprintf(fid, '%%OPTIONS.REREF.inputStr          = %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, '%%OPTIONS.REREF.outputStr         = %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, '%%OPTIONS.REREF.optionsFcn        = OPTIONS.pathsScript; \n');
fprintf(fid, '\n%%%% Cleaning options \n');
fprintf(fid, 'OPTIONS.CLEANED.betaLim         = Inf; %% [ number ]: Checks for trials high in beta power. Limit of the amount of beta-power accepted in a trial (in dB.). \n');
fprintf(fid, 'OPTIONS.CLEANED.gammaLim        = Inf; %% [ number ]: Checks for trials high in gamma power. Limit of the amount of gamma-power accepted in a trial (in dB.). \n');
fprintf(fid, 'OPTIONS.CLEANED.varLim          = Inf; %% [ number ]: Checks for trials with a high variance. Limit of the amount of variance accepted in a trial (uses var function of matlab) \n');
fprintf(fid, 'OPTIONS.CLEANED.flatLim         = 0.05; %% [ number ]: Checks for flatlining. Limit of the amount of inverse variance accepted in a trial (uses var function of matlab) \n');
fprintf(fid, 'OPTIONS.CLEANED.kurtLim         = 5; %% [ number ]: Checks for abnormal peakyness in epoch. Also useful to detect large jumps. Limit of the kurtosis per trial (uses kurtosis function of matlab) \n');
fprintf(fid, 'OPTIONS.CLEANED.vMaxLim         = 500; %% [ number ]: Checks for high amplitudes. Limit the max amplitude of a trial \n');
fprintf(fid, 'OPTIONS.CLEANED.redefineTrial   = ''yes''; %% ''string'': (''yes'' or ''no''). Set to redefine data to given triallength. Do not set to yes if data is already cut in trials \n');
fprintf(fid, 'OPTIONS.CLEANED.triallength     = 1; %% [ number ]: Triallength (in seconds) used for artifact removal (usually set to 1). The definitive triallength is set later in the analysis \n');
fprintf(fid, 'OPTIONS.CLEANED.cutOutputData   = ''yes''; %% ''string'': (''yes'' or ''no'') set to ''yes'' if artefacts need to be recalculated after channel removal. Set to ''no'' when doing the rmchannels, but ''yes'' during trialremoval. **Terrible explanation, terrible variable name, just set it to ''no'' if you want to remove channels. Will be changed** \n');
fprintf(fid, 'OPTIONS.CLEANED.showFigures     = ''yes''; %% ''string'': (''yes'' or ''no''). \n');
fprintf(fid, 'OPTIONS.CLEANED.saveFigures     = ''yes''; %% ''string'': (''yes'' or ''no''). Can only save figures if figures are showed \n');
fprintf(fid, 'OPTIONS.CLEANED.inputStr        = ''RMCHANNELS''; %% ''string'': outputstr of previous analysis step, to be used as input for this step\n');
fprintf(fid, 'OPTIONS.CLEANED.outputStr       = ''CLEANED''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.CLEANED.saveData        = OPTIONS.saveData; \n');
fprintf(fid, 'OPTIONS.CLEANED.rmTrials        = ''yes''; %% ''string'' (''yes'' or ''no''), set to ''yes'' if artifact-ridden trials need to be removed \n');
fprintf(fid, 'OPTIONS.CLEANED.optionsFcn      = OPTIONS.pathsScript; \n');
fprintf(fid, '\n%%%% OPTIONS TO APPEND CLEANED DATA \n');
fprintf(fid, 'OPTIONS.APPEND.inputStr        = ''CLEANED''; %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, 'OPTIONS.APPEND.outputStr       = ''APPENDED''; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.APPEND.saveData         = OPTIONS.saveData; \n');
fprintf(fid, '\n%%%% OPTIONS TO CUT DATA INTO TRIALS \n');
fprintf(fid, 'OPTIONS.DATACUT.inputStr        = ''APPENDED''; %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, 'OPTIONS.DATACUT.outputStr       = [''TRIALLENGTH'' num2str(OPTIONS.triallength)]; %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, 'OPTIONS.DATACUT.saveData        = OPTIONS.saveData; \n');
fprintf(fid, 'OPTIONS.DATACUT.triallength     = OPTIONS.triallength; \n');
fprintf(fid, '\n%%%% WPLI Connetivity calculation options \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.inputStr   = %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.method     = ''wpli_debased''; %% method used for calculating connectivity \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.freqOutput = ''powandcsd''; %% frequency output used \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.outputStr  = %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.saveData   = OPTIONS.saveData; \n');
fprintf(fid, '%%OPTIONS.WPLICONNECTIVITY.optionsFcn = OPTIONS.pathsScript; \n');
fprintf(fid, '\n%%%% PLI connetivity calculation options \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.inputStr    = %% ''string'': outputstr of previous analysis step, to be used as input for this step \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.method      = ''pli''; %% method used for calculating connectivity \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.freqOutput  = ''powandcsd''; %% frequency output used \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.outputStr   = %% ''string'': addition to filename when saving, so that the output filename becomes [currSubject outputStr .mat] \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.saveData    = OPTIONS.saveData; \n');
fprintf(fid, '%%OPTIONS.PLICONNECTIVITY.optionsFcn  = OPTIONS.pathsScript; \n');

if exist([path2root filesep 'setOptions.m'], 'file') == 2
    filecreated = true(1);
else
    filecreated = false(1);
    warning('No setOptions.m file created at given location')
end
    
fclose(fid);